{"version":3,"file":"cdk-table-exporter.js","sources":["ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/export-type.ts","ng://cdk-table-exporter/lib/services/data-extractor.service.ts","ng://cdk-table-exporter/lib/mime.ts","ng://cdk-table-exporter/lib/constants.ts","ng://cdk-table-exporter/lib/file-util.ts","ng://cdk-table-exporter/lib/services/exporters/file-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/worksheet-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/csv-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/txt-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xls-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/json-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xlsx-exporter.service.ts","ng://cdk-table-exporter/lib/services/service-locator.service.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts","ng://cdk-table-exporter/public-api.ts","ng://cdk-table-exporter/cdk-table-exporter.ts"],"sourcesContent":["import { CdkTableModule } from '@angular/cdk/table';\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CdkTableModule\r\n  ],\r\n  exports: []\r\n})\r\nexport class CdkTableExporterModule { }\r\n","export enum ExportType {\r\n  XLS = 'xls',\r\n  XLSX = 'xlsx',\r\n  CSV = 'csv',\r\n  TXT = 'txt',\r\n  JSON = 'json',\r\n  OTHER = 'other'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataRowOutlet } from '@angular/cdk/table';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataExtractorService {\r\n\r\n  constructor() { }\r\n\r\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>, outlet?: DataRowOutlet): Array<any> {\r\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet ?? cdkTable._rowOutlet);\r\n  }\r\n\r\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\r\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\r\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\r\n  }\r\n\r\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\r\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\r\n  }\r\n\r\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\r\n    const result = new Array<any>();\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\r\n      result.push(this.createExcelItem(row));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\r\n    const result = new Array<string>();\r\n    const cells: any = row.children;\r\n    for (let i = 0; i < cells.length; i++) {\r\n      if (!this.shouldHide(hiddenColumns, i)) {\r\n        const element = cells.item(i).innerText;\r\n        result.push(element);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\r\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private createExcelItem(row: Array<string>): any {\r\n    return Object.assign({}, row);\r\n  }\r\n}\r\n","export class Mime {\r\n\r\n  extension: string;\r\n  contentTypeHeader: string;\r\n\r\n  constructor(extension: string, contentTypeHeader: string) {\r\n    this.extension = extension;\r\n    this.contentTypeHeader = contentTypeHeader;\r\n  }\r\n\r\n}\r\n","import { ExportType } from './export-type';\r\nimport { Mime } from './mime';\r\n\r\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nexport const TYPE_ARRAY = 'array';\r\nexport const CHAR_SET_UTF = ';charset=utf-';\r\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nexport const CONTENT_TYPE_APPLICATION = 'application/';\r\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nexport const DOT = '.';\r\nexport const COMMA = ',';\r\nexport const EXTENSION_XLS = DOT + ExportType.XLS;\r\nexport const EXTENSION_XLSX =  DOT + ExportType.XLSX;\r\nexport const EXTENSION_CSV =  DOT + ExportType.CSV;\r\nexport const EXTENSION_JSON =  DOT + ExportType.JSON;\r\nexport const EXTENSION_TEXT =  DOT + ExportType.TXT;\r\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\r\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nexport const REF = '!ref';\r\nexport const XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\r\nexport const RETURN = '\\n';\r\nexport const TAB = '\\t';\r\nexport const XLSX_COLS = '!cols';\r\n","import { ExportType } from './export-type';\r\nimport * as FileSaver from 'file-saver';\r\nimport { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from './constants';\r\nimport { Mime } from './mime';\r\nimport { Options } from './options';\r\n\r\nexport class FileUtil {\r\n  public static save(content: string, mime: Mime, options?: Options) {\r\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\r\n    let fileName = MAT_TABLE_EXPORTER;\r\n    if (options && options.fileName) {\r\n      fileName = options.fileName;\r\n    }\r\n    FileSaver.saveAs(blob, fileName + mime.extension);\r\n  }\r\n\r\n  public static isXls(fileName: string): boolean {\r\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n  }\r\n\r\n  public static identifyExportType(fileName?: string): ExportType {\r\n    if (fileName && FileUtil.isXls(fileName)) {\r\n      return ExportType.XLS;\r\n    } else {\r\n      return ExportType.XLSX;\r\n    }\r\n  }\r\n\r\n  public static removeExtension(options?: Options) {\r\n    options.fileName = options.fileName.split(DOT)[0];\r\n  }\r\n}\r\n","import { FileUtil } from '../../file-util';\r\nimport { Mime } from '../../mime';\r\nimport { Exporter } from './exporter';\r\n\r\nexport abstract class FileExporter<T> implements Exporter<T> {\r\n  constructor() {}\r\n\r\n  public export(rows: Array<any>, options?: T) {\r\n    if (!rows) {\r\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\r\n    }\r\n    const content = this.createContent(rows, options);\r\n    const mimeType = this.getMimeType();\r\n    FileUtil.save(content, mimeType, options);\r\n  }\r\n\r\n  public abstract createContent(rows: Array<any>, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n}\r\n","import * as XLSX from 'xlsx';\r\nimport { Mime } from '../../mime';\r\nimport { FileExporter } from './file-exporter';\r\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\r\nexport abstract class WorksheetExporter<T> extends FileExporter<T> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: Array<any>, options?: T): any {\r\n    const workSheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\r\n      skipHeader: true // we don't want to see object properties as our headers\r\n    });\r\n    return this.workSheetToContent(workSheet, options);\r\n  }\r\n  public abstract workSheetToContent(workSheet: XLSX.WorkSheet, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n\r\n}\r\n","import { COMMA, MIME_CSV } from './../../constants';\r\nimport { TxtOptions } from '../../options';\r\nimport { Injectable } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nimport { WorksheetExporter } from './worksheet-exporter';\r\nimport { Mime } from '../../mime';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CsvExporterService extends WorksheetExporter<TxtOptions> {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options?: TxtOptions): any {\r\n    return XLSX.utils.sheet_to_csv(worksheet, {FS: options?.delimiter ?? COMMA});\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_CSV;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Mime } from '../../mime';\r\nimport { TxtOptions } from '../../options';\r\nimport { MIME_TXT, RETURN, TAB } from './../../constants';\r\nimport { FileExporter } from './file-exporter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TxtExporterService extends FileExporter<TxtOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: any[], options?: TxtOptions) {\r\n    let content = '';\r\n    rows.forEach(element => {\r\n      content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\r\n    });\r\n    return content;\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_TXT;\r\n  }\r\n\r\n  private getDelimiter(options?: TxtOptions) {\r\n    if (options && options.delimiter) {\r\n      return options.delimiter;\r\n    } else {\r\n      return TAB;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nimport { MIME_EXCEL_XLS, TYPE_ARRAY, XLSX_COLS } from '../../constants';\r\nimport { Mime } from '../../mime';\r\nimport { ExcelOptions } from '../../options';\r\nimport { WorksheetExporter } from './worksheet-exporter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options: ExcelOptions = {} as ExcelOptions): any {\r\n    const workBook = XLSX.utils.book_new();\r\n    if (options.columnWidths) {\r\n      worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\r\n    }\r\n    this.correctTypes(options);\r\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\r\n    return XLSX.write(workBook, options);\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_EXCEL_XLS;\r\n  }\r\n\r\n  private correctTypes(options: ExcelOptions) {\r\n    if (!options.type) {\r\n      options.type = TYPE_ARRAY;\r\n    }\r\n    (options as any).bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\r\n  }\r\n\r\n  private convertToWch(columnWidths: Array<number>): Array<{wch: number}> {\r\n    return columnWidths.map(width => ({wch: width}));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Options } from '../../options';\r\nimport { FileExporter } from './file-exporter';\r\nimport { Mime } from '../../mime';\r\nimport { MIME_JSON } from '../../constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JsonExporterService extends FileExporter<Options> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: any[], options?: Options) {\r\n    return JSON.stringify(rows);\r\n  }\r\n   public getMimeType(): Mime {\r\n    return MIME_JSON;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { XlsExporterService } from './xls-exporter.service';\r\nimport { Mime } from '../../mime';\r\nimport { MIME_EXCEL_XLSX } from '../../constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XlsxExporterService extends XlsExporterService {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // override\r\n  public getMimeType(): Mime {\r\n    return MIME_EXCEL_XLSX;\r\n  }\r\n}\r\n","import { CsvExporterService } from './exporters/csv-exporter.service';\r\nimport { TxtExporterService } from './exporters/txt-exporter.service';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Options } from '../options';\r\nimport { ExportType } from './../export-type';\r\nimport { Exporter } from './exporters/exporter';\r\nimport { XlsExporterService } from './exporters/xls-exporter.service';\r\nimport { JsonExporterService } from './exporters/json-exporter.service';\r\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServiceLocatorService {\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  public getService(exportType: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other'): Exporter<Options> {\r\n    switch (exportType) {\r\n      case ExportType.XLS.valueOf():\r\n        return this.injector.get<XlsExporterService>(XlsExporterService);\r\n      case ExportType.XLSX.valueOf():\r\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\r\n      case ExportType.JSON.valueOf():\r\n        return this.injector.get<JsonExporterService>(JsonExporterService);\r\n      case ExportType.TXT.valueOf():\r\n        return this.injector.get<TxtExporterService>(TxtExporterService);\r\n      case ExportType.CSV.valueOf():\r\n        return this.injector.get<CsvExporterService>(CsvExporterService);\r\n      case ExportType.OTHER.valueOf():\r\n        return null;\r\n      default:\r\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\r\n    }\r\n  }\r\n}\r\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { Directive, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ExportType } from './export-type';\r\nimport { ExcelOptions, Options, TxtOptions } from './options';\r\nimport { DataExtractorService } from './services/data-extractor.service';\r\nimport { Exporter } from './services/exporters/exporter';\r\nimport { ServiceLocatorService } from './services/service-locator.service';\r\n\r\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\n@Directive()\r\nexport abstract class CdkTableExporter {\r\n\r\n  private _exporterService: Exporter<Options>;\r\n\r\n  @Input() hiddenColumns?: Array<number>;\r\n  @Input() exporter?: Exporter<Options>;\r\n  @Output() exportCompleted = new EventEmitter<void>();\r\n  @Output() exportStarted = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  private _subscription: Subscription;\r\n\r\n  private _options?: Options;\r\n\r\n  private _selectedRows?: Array<number>;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    private serviceLocator: ServiceLocatorService,\r\n    private dataExtractor: DataExtractorService,\r\n    protected _cdkTable: any\r\n  ) {}\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the number of items to display on a page\r\n   */\r\n  public abstract getPageSize(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * Must return the total number of items in the table\r\n   */\r\n  public abstract getTotalItemsCount(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  /**\r\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n   */\r\n  exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options | ExcelOptions | TxtOptions) {\r\n    this.loadExporter(exportType);\r\n    this._options = options;\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.extractTableHeader();\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n  }\r\n\r\n  toggleRow(index: number): void {\r\n    const paginatedRowIndex: number = this.getPaginatedRowIndex(index);\r\n    if (this.isToggleOn(paginatedRowIndex)) {\r\n      this.toggleOff(paginatedRowIndex);\r\n    } else {\r\n      this.toggleOn(paginatedRowIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This event will clear rows selection done using toggleRow functionality\r\n   * \r\n   */\r\n  resetToggleRows() {\r\n    this._selectedRows = [];\r\n  }\r\n\r\n  private toggleOn(index: number) {\r\n    this._selectedRows = [...(this._selectedRows || []), index];\r\n  }\r\n\r\n  private toggleOff(index: number) {\r\n    this._selectedRows =  this._selectedRows.filter(x => x !== index);\r\n  }\r\n\r\n  private isToggleOn(index: number): boolean {\r\n    return this._selectedRows?.includes(index);\r\n  }\r\n\r\n\r\n  private loadExporter(exportType: any) {\r\n    if (exportType === ExportType.OTHER.valueOf()) {\r\n      this._exporterService = this.exporter;\r\n    } else {\r\n      this._exporterService = this.serviceLocator.getService(exportType);\r\n    }\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler();\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.extractTableFooter();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    const rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\r\n    this._data = this._data.concat(this.getSelectedRows(rows));\r\n  }\r\n\r\n  private getSelectedRows(rows: Array<any>) {\r\n    if (this.isSelectiveExport()) {\r\n      return rows.filter((_, i) => this._selectedRows.includes(this.getPaginatedRowIndex(i)));\r\n    } else {\r\n      return rows;\r\n    }\r\n  }\r\n\r\n  private isSelectiveExport(): boolean {\r\n    return this._selectedRows && !this.isMasterToggleOff() &&  !this.isMasterToggleOn();\r\n  }\r\n\r\n  private isMasterToggleOn(): boolean {\r\n    return this.compareSelectedRowCount(this.getTotalItemsCount());\r\n  }\r\n\r\n  private isMasterToggleOff(): boolean {\r\n    return this.compareSelectedRowCount(0);\r\n  }\r\n\r\n  private compareSelectedRowCount(rowCount: number): boolean {\r\n    return !!(this._selectedRows?.length === rowCount);\r\n  }\r\n\r\n  private initPageHandler(): void {\r\n    if (!this._subscription) {\r\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n        setTimeout(() => {\r\n          if (this._isIterating) {\r\n            this.extractDataOnCurrentPage();\r\n            if (this.hasNextPage()) {\r\n              this.nextPage();\r\n            } else {\r\n              this._isIterating = false;\r\n              this.goToPage(this._initialPageIndex);\r\n            }\r\n          } else if (this._isExporting) {\r\n            this._isExporting = false;\r\n            this.extractTableFooter();\r\n            this.exportExtractedData();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this._exporterService.export(this._data, this._options);\r\n    this._data = new Array<any>();\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n  private extractSpecialRows(outlet: DataRowOutlet) {\r\n    this._data.push(...this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet));\r\n  }\r\n\r\n  private extractTableHeader() {\r\n    this.extractSpecialRows(this._cdkTable._headerRowOutlet);\r\n  }\r\n\r\n  private extractTableFooter() {\r\n    this.extractSpecialRows(this._cdkTable._footerRowOutlet);\r\n  }\r\n\r\n  private hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private getPaginatedRowIndex(index: number): number {\r\n    return index + (this.getPageSize() * this.getCurrentPageIndex());\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of cdk-table-exporter\r\n */\r\n\r\nexport * from './lib/cdk-table-exporter.module';\r\nexport { CdkTableExporter } from './lib/cdk-table-exporter';\r\nexport { Exporter } from './lib/services/exporters/exporter';\r\nexport { FileExporter } from './lib/services/exporters/file-exporter';\r\nexport { JsonExporterService } from './lib/services/exporters/json-exporter.service';\r\nexport { TxtExporterService } from './lib/services/exporters/txt-exporter.service';\r\nexport { XlsExporterService } from './lib/services/exporters/xls-exporter.service';\r\nexport { WorksheetExporter } from './lib/services/exporters/worksheet-exporter';\r\nexport { XlsxExporterService } from './lib/services/exporters/xlsx-exporter.service';\r\nexport { CsvExporterService } from './lib/services/exporters/csv-exporter.service';\r\nexport { Options, ExcelOptions } from './lib/options';\r\nexport { ExportType } from './lib/export-type';\r\nexport { ServiceLocatorService } from './lib/services/service-locator.service';\r\nexport { DataExtractorService } from './lib/services/data-extractor.service';\r\nexport { Mime } from './lib/mime';\r\nexport * from './lib/constants';\r\nexport { FileUtil } from './lib/file-util';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["FileSaver.saveAs","XLSX.utils","XLSX.write"],"mappings":"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"}